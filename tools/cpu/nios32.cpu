; Altera NIOS 32-bit CPU description.  -*- Scheme -*-
; Copyright (C) 2000, 2001 Red Hat, Inc.
; This file is part of CGEN.
; See file COPYING.CGEN for details.

(define-hardware
  (name h-m32-gr);
  (comment "nios-32 general registers")
  (attrs VIRTUAL (MACH32))
  (type register SI (32))
  (indices extern-keyword gr-names);
  (get (index) (c-call SI "GET_H_GR_RAW" index))
  (set (index newval) (c-call VOID "SET_H_GR_RAW" index newval))
)

; r0 which is required by some instructions
(define-hardware
  (name h-m32-gr0);
  (comment "nios-32 register 0")
  (attrs VIRTUAL (MACH32))
  (type register SI)
  (indices extern-keyword gr0-name); %r0 only
  (get () (c-call SI "GET_H_GR_RAW" 0))
  (set (newval) (c-call VOID "SET_H_GR_RAW" 0 newval))
)

; Rp which is restricted to certain possible values
(define-hardware
  (name h-m32-bp);
  (comment "nios-32 base pointer registers")
  (attrs VIRTUAL (MACH32))
  (type register SI (4))
  (indices extern-keyword bp-names)
  (get (index) (c-call SI "GET_H_GR_RAW" (add index 16)))
  (set (index newval) (c-call VOID "SET_H_GR_RAW" (add index 16) newval))
)

; Rz which is restricted to certain possible values
(define-hardware
  (name h-m32-rz);
  (comment "nios-32 Rz registers")
  (attrs VIRTUAL (MACH32))
  (type register SI (4))
  (indices extern-keyword gr-names)
  (get (index) (c-call SI "GET_H_GR_RAW" index))
  (set (index newval) (c-call VOID "SET_H_GR_RAW" index newval))
)

; sp which is required by some instructions
(define-hardware
  (name h-m32-sp);
  (comment "nios-32 sp register")
  (attrs VIRTUAL (MACH32))
  (type register SI)
  (indices keyword "" ((%sp 0))); %sp only
  (get () (c-call SI "GET_H_GR_RAW" 14))
  (set (newval) (c-call VOID "SET_H_GR_RAW" 14 newval))
)

(define-hardware
  (name h-m32-ctl);
  (comment "nios-32 control registers")
  (attrs VIRTUAL (MACH32))
  (type register UHI (3))
  (indices extern-keyword ctl-names);
  (get (index) (c-call HI "GET_H_CTL_RAW" index))
  (set (index newval) (c-call VOID "SET_H_CTL_RAW" index newval))
)

; Operands

(dnop m32_Ra      "source register a"         ((MACH32)) h-m32-gr  f-Ra)
(dnop m32_Rb      "source register b"         ((MACH32)) h-m32-gr  f-Rb)
(dnop m32_R0      "source register 0"         ((MACH32)) h-m32-gr0 f-nil)
(dnop m32_sp      "stack pointer"             ((MACH32)) h-m32-sp  f-nil)
(dnop m32_Rp      "base pointer register"     ((MACH32)) h-m32-bp  f-Rp)
(dnop m32_Rz      "ctl target register"       ((MACH32)) h-m32-rz  f-Rz)
(dnop m32_i6      "6-bit word pc rel"         ((MACH32)) h-iaddr   f-i6-rel-w)
(dnop m32_i8v     "8-bit word pc rel"         ((MACH32)) h-iaddr   f-i8v-rel-w)

(define-pmacro (m32-gr x) (.sym m32_ x))

; sts8s
(dni (sts8s32)
     (.str "sts8s [sp, imm],reg")
     ((MACH32) PREFIXED-INSN)
     (.str "sts8s [$m32_sp,$i10],$m32_R0")
     (+ OP_STS8s i10)
     (sequence ((SI tmp) (SI tmp2) (SI ea_word))
	       (set pbit (const 0))
	       (set tmp (and (zext SI i10) (const #x03)))
	       (set tmp2 (srl SI m32_R0 (sll tmp (const 3))))
	       (set ea_word (and SI (const #xfffffffc) (add SI m32_sp i10)))
	       (set (mem UQI (add SI ea_word tmp)) (trunc UQI tmp2)))
     ()
)

; sts16s
(dni (sts16s)
     (.str "sts16s [sp, imm],reg")
     ((MACH32) PREFIXED-INSN)
     (.str "sts16s [$m32_sp,$i9],$m32_R0")
     (+ OP_STS16s i9 o1)
     (sequence ((SI tmp) (SI tmp2) (SI ea_word))
	       (set pbit (const 0))
	       (set tmp (and (zext SI i9) (const #x1)))
	       (set tmp2 (srl SI m32_R0 (sll tmp (const 4))))
	       (set ea_word (and SI (const #xfffffffc) (add m32_sp (sll i9 (const 1)))))
	       (set (mem UHI (add SI ea_word (sll tmp (const 1)))) (trunc UHI tmp2)))
     ()
)

; movhi
(dni (movhi)
     (.str "movhi reg/imm")
     ((MACH32) PREFIXED-INSN)
     (.str "movhi $m32_Ra,$i5")
     (+ OP_MOVHI m32_Ra i5)
     (sequence ((SI K5) (SI tmp))
	       (if (ne pbit (const 0))
		   (set K5 (zext SI (or HI K i5)))
		   (set K5 i5))
	       (set pbit (const 0))
	       (set tmp (and m32_Ra (const #x0000ffff)))
	       (set m32_Ra (or tmp (sll K5 (const 16)))))
     ()
)

; ext16d
(dni (ext16d)
     (.str "ext16d reg/reg")
     ((MACH32))
     (.str "ext16d $m32_Ra,$m32_Rb")
     (+ OP_EXT16d m32_Ra m32_Rb)
     (sequence ((SI tmp))
	       (set pbit (const 0))
	       (set tmp (and m32_Rb (const #x02)))
	       (set m32_Ra (srl SI m32_Ra (sll tmp (const 3))))
	       (set m32_Ra (and SI m32_Ra (const #xffff))))
     ()
)

; sext16
(dni (sext16)
     (.str "sext16 reg")
     ((MACH32))
     (.str "sext16 $m32_Ra")
     (+ OP_SEXT16 m32_Ra)
     (sequence ((HI tmp))
	       (set pbit (const 0))
	       (set tmp (trunc HI m32_Ra))
	       (set m32_Ra (ext SI tmp)))
     ()
)

; st16d
(dni (st16d)
     (.str "st16d reg/r0")
     ((MACH32))
     (.str "st16d [$m32_Ra],$m32_R0")
     (+ OP_ST16d m32_Ra)
     (sequence ((HI tmp) (SI Ktmp))
	       (if (ne pbit (const 0))
		   (set Ktmp (sra (ext SI K) (const 3)))
		   (set Ktmp (const 0)))
	       (set pbit (const 0))
	       (set tmp (trunc HI (srl m32_R0 (sll (and m32_Ra (const 2)) (const 3)))))
	       (set (mem HI (and SI (add SI m32_Ra Ktmp) (const #xfffffffe))) tmp))
     ()
)

; fill16
(dni (fill16)
     (.str "fill16 r0/reg")
     ((MACH32))
     (.str "fill16 $m32_R0,$m32_Ra")
     (+ OP_FILL16 m32_Ra)
     (sequence ((SI tmp) (SI tmp2))
	       (set pbit (const 0))
	       (set tmp (and m32_Ra (const #xffff)))
	       (set tmp2 (sll tmp (const 16)))
	       (set tmp (or tmp tmp2))
	       (set m32_R0 tmp))
     ()
)
; ext8s
(dni (ext8s32)
     (.str "ext8s reg/imm1")
     ((MACH32))
     (.str "ext8s $m32_Ra,$i2")
     (+ OP_EXT8s m32_Ra i2)
     (sequence ((UQI tmp))
	       (set pbit (const 0))
	       (set tmp (trunc UQI (srl m32_Ra (sll i2 (const 3)))))
	       (set m32_Ra tmp))
     ()
)

; st8s
(dni (st8s32)
     (.str "st8s reg/imm1/r0")
     ((MACH32) PREFIXED-INSN)
     (.str "st8s [$m32_Ra],$m32_R0,$i2")
     (+ OP_ST8s m32_Ra i2)
     (sequence ((UQI tmp) (SI K2) (SI m32_Ra_word))
	       (if (eq pbit (const 1))
		   (set K2 (ext SI (or HI i2 (sra HI K (const 3)))))
		   (set K2 i2))
	       (set pbit (const 0))
	       (set tmp (trunc UQI (srl m32_R0 (sll i2 (const 3)))))
	       (set m32_Ra_word (sll SI (srl SI m32_Ra (const 2)) (const 2)))
	       (set (mem UQI (add m32_Ra_word K2)) tmp))
     ()
)

; ext16s
(dni (ext16s)
     (.str "ext16s reg/imm1")
     ((MACH32))
     (.str "ext16s $m32_Ra,$i1")
     (+ OP_EXT16s m32_Ra i1)
     (sequence ((SI tmp))
	       (set pbit (const 0))
	       (set tmp (srl m32_Ra (sll i1 (const 4))))
	       (set m32_Ra (and tmp (const #xffff))))
     ()
)

; st16s
(dni (st16s)
     (.str "st16s reg/imm1/r0")
     ((MACH32) PREFIXED-INSN)
     (.str "st16s [$m32_Ra],$m32_R0,$i1")
     (+ OP_ST16s m32_Ra i1)
     (sequence ((HI tmp) (SI m32_Ra_word) (SI K1))
	       (if (eq pbit (const 1))
		   (set K1 (or i1 (ext SI (sra HI K (const 4)))))
		   (set K1 i1))
		   (set pbit (const 0))
	       (set tmp (trunc HI (srl m32_R0 (sll i1 (const 4)))))
	       (set m32_Ra_word (sll SI (srl SI m32_Ra (const 2)) (const 2)))
	       (set (mem HI (add m32_Ra_word (sll K1 (const 1)))) tmp))
     ()
)

; st8d
(dni (st8d32)
     (.str "st8d reg/r0")
     ((MACH32))
     (.str "st8d [$m32_Ra],$m32_R0")
     (+ OP_ST8d m32_Ra)
     (sequence ((QI tmp) (SI Ktmp))
	       (if (ne pbit (const 0))
		   (set Ktmp (sra (ext SI K) (const 3)))
		   (set Ktmp (const 0)))
	       (set pbit (const 0))
	       (set tmp (trunc QI (srl m32_R0 (sll (and m32_Ra (const 3)) (const 3)))))
	       (set (mem QI (add SI m32_Ra Ktmp)) tmp))
     ()
)

; wrctl
(dni (wrctl32)
     (.str "wrctl reg")
     ((MACH32) COND-CTI DELAY-SLOT)
     (.str "wrctl $m32_Ra")
     (+ OP_WRCTL m32_Ra)
     (sequence ((SI tmp))
	       (if (eq pbit (const 0))
		   (set K (const 0)))
	       (set pbit (const 0))
	       (if (eq K (const 0))
		   (set wbit (const 1)))
	       (set tmp (zext SI (srl K (const 5))))
	       (set (reg HI h-m32-ctl tmp) (trunc HI m32_Ra)))
     ()
)

; add / sub
(define-pmacro (arithmetic-op32 name insn comment opc op arg1 arg2)
  (arithmetic-op-com name 32 SI (MACH32) insn comment opc op (m32-gr arg1) (m32-gr arg2)))

(arithmetic-op32   add   add   "reg/reg"   OP_ADD add Ra Rb)
(arithmetic-op32   sub   sub   "reg/reg"   OP_SUB sub Ra Rb)

; addi / subi
(define-pmacro (arithmetic-imm-op32 name insn comment opc op arg1 arg2)
  (arithmetic-imm-op-com name 32 SI (MACH32) insn comment opc op (m32-gr arg1) arg2))

(arithmetic-imm-op32 addi addi "reg/imm"       OP_ADDI add Ra i5)
(arithmetic-imm-op32 subi subi "reg/imm"       OP_SUBI sub Ra i5)

; or / xor / and
(define-pmacro (logical-dual-op32 name insn comment opc op arg1)
  (logical-dual-op-com name 32 SI (MACH32) insn comment opc op (m32-gr arg1) h-m32-gr))

(logical-dual-op32 or  or   "reg/{imm | reg}"       OP_OR  or  Ra)
(logical-dual-op32 xor xor  "reg/{imm | reg}"       OP_XOR xor Ra)
(logical-dual-op32 and and  "reg/{imm | reg}"       OP_AND and Ra)

; andn
(andn-com  32  SI   (MACH32)  m32_Ra   h-m32-gr)

; lsl / lsr / asr
(define-pmacro (shift-op32 name insn comment opc op arg1 arg2)
  (shift-op-com name 32 USI (MACH32) insn comment opc op (m32-gr arg1) (m32-gr arg2)))

(shift-op32   lsl   lsl   "reg/reg"   OP_LSL  sll Ra Rb)
(shift-op32   lsr   lsr   "reg/reg"   OP_LSR  srl Ra Rb)
(shift-op32   asr   asr   "reg/reg"   OP_ASR  sra Ra Rb)

(define-pmacro (shift-imm-op32 name insn comment opc op arg1)
  (shift-op-com name 32 USI (MACH32) insn comment opc op (m32-gr arg1) i5))

(shift-imm-op32   lsli  lsli  "reg/imm"   OP_LSLI sll Ra)
(shift-imm-op32   lsri  lsri  "reg/imm"   OP_LSRI srl Ra)
(shift-imm-op32   asri  asri  "reg/imm"   OP_ASRI sra Ra)

(define-pmacro (monadic-op32 name insn comment opc op arg1)
  (monadic-op-com name 32 USI (MACH32) insn comment opc op (m32-gr arg1)))

; not / neg / abs
(monadic-op32     not   not   "reg"       OP_NOT  inv Ra)
(monadic-op32     neg   neg   "reg"       OP_NEG  neg Ra)
(monadic-op32     abs   abs   "reg"       OP_ABS  abs Ra)


; mov / movi
(mov-com  32 SI (MACH32) m32_Ra m32_Rb)
(movi-com 32 SI (MACH32) m32_Ra)

; bgen
(bgen-com 32 SI (MACH32) m32_Ra)

; cmp / cmpi
(cmp-com 32 SI (MACH32) m32_Ra m32_Rb)
(cmpi-com 32 SI (MACH32) m32_Ra)

; ldc
(ldc-com 32 SI (MACH32) m32_Ra m32_i6)

; ext8d
(ext8d-com 32 SI (MACH32) m32_Ra m32_Rb)

; sext8
(sext8-com 32 SI (MACH32) m32_Ra)

; fill8
(fill8-com 32 SI (MACH32) m32_R0 m32_Ra)

; lds / sts
(lds-com 32 SI (MACH32) m32_Ra m32_sp)
(sts-com 32 SI (MACH32) m32_Ra m32_sp)

; ldp / stp
(ldp-com 32 SI (MACH32) m32_Ra m32_Rp)
(stp-com 32 SI (MACH32) m32_Ra m32_Rp)

; ld / st
(ld-com 32 SI (MACH32) m32_Ra m32_Rb)
(st-com 32 SI (MACH32) m32_Ra m32_Rb)

; trap
(trap-com 32 SI (MACH32))

; tret
(tret-com 32 SI (MACH32) m32_Ra)

; save
(save-com 32 SI (MACH32) m32_sp)

; restore
(restore-com 32 SI (MACH32) xRa)

;  bsr
(bsr-com  32 SI (MACH32) (reg h-m32-gr 15))
(bsrr-com 32 SI (MACH32) (reg h-m32-gr 15) m32_Ra)

;  jmp / call
(jmp-com  32 SI (MACH32) m32_Ra)
(call-com 32 SI (MACH32) m32_Ra (reg h-m32-gr 15))

;  jmpc / callc
(jmpc-com  32 SI (MACH32) m32_i8v)
(callc-com 32 SI (MACH32) m32_i8v (reg h-m32-gr 15))

; skp0 / skp1 / skprz / skps
(skpx-com  skp0   skp0   32 SI (MACH32) m32_Ra OP_SKP0   eq)
(skpx-com  skp1   skp1   32 SI (MACH32) m32_Ra OP_SKP1   ne) 
(skprx-com skprz  skprz  32 SI (MACH32) m32_Ra OP_SKPRz  eq) 
(skprx-com skprnz skprnz 32 SI (MACH32) m32_Ra OP_SKPRnz ne) 
(skps-com                32 SI (MACH32))

; if0 / if1 / ifrnz / ifrz
(ifx-com  32 if0   (MACH32) m32_Ra skp1)
(ifx-com  32 if1   (MACH32) m32_Ra skp0)
(ifrx-com 32 ifrz  (MACH32) m32_Ra skprnz)
(ifrx-com 32 ifrnz (MACH32) m32_Ra skprz)
(ifs-com  32       (MACH32))

; rrc / rlc
(rrc-com 32 SI (MACH32) m32_Ra)
(rlc-com 32 SI (MACH32) m32_Ra)

; nop
(nop-com 32 (MACH32) m32_Ra m32_Rb)

; inc / dec
(counter-com 32 inc (MACH32) m32_Ra addi)
(counter-com 32 dec (MACH32) m32_Ra subi)

; clr
(clr-com 32 (MACH32) m32_Ra)

; ret / lret
(ret-com 32 (MACH32) m32_Ra)
(lret-com 32 (MACH32) m32_Ra)

; rdctl
(rdctl-com 32 SI (MACH32) m32_Ra h-m32-ctl)

; New instructions added at request of Altera.
(dni (usr0_32) (.str "usr0") ((MACH32)) (.str "usr0 $m32_Ra,$m32_Rb") (+ OP_USR0 m32_Ra m32_Rb) (nop) ())
(dni (usr1_32) (.str "usr1") ((MACH32)) (.str "usr1 $m32_Ra") (+ OP_USR1  m32_Ra) (nop) ())
(dni (usr2_32) (.str "usr2") ((MACH32)) (.str "usr2 $m32_Ra") (+ OP_USR2  m32_Ra) (nop) ())
(dni (usr3_32) (.str "usr3") ((MACH32)) (.str "usr3 $m32_Ra") (+ OP_USR3  m32_Ra) (nop) ())
(dni (usr4_32) (.str "usr4") ((MACH32)) (.str "usr4 $m32_Ra") (+ OP_USR4  m32_Ra) (nop) ())
(dni (swap)    (.str "swap") ((MACH32)) (.str "swap $m32_Ra") (+ OP_SWAP  m32_Ra) (nop) ())
(dni (mstep)   (.str "mstep")((MACH32)) (.str "mstep $m32_Ra")(+ OP_MSTEP m32_Ra) (nop) ())
(dni (mul)     (.str "mul")  ((MACH32)) (.str "mul $m32_Ra") (+ OP_MUL   m32_Ra) (nop) ())
